prova <- get_iox(svDialogs::dlg_dir()$res, inter = TRUE),
error = function(c){
c$message
}
)
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = TRUE),
error = function(c){
msg <- conditionMessage(c)
}
)
x
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
msg <- conditionMessage(c)
}
)
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
c
}
)
x
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
conditionMessage(c)
}
)
devtools::load_all(".")
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
conditionMessage(c)
}
)
library(rvent)
library(rvent)
devtools::load_all(".")
get_iox()
prova <- get_iox()
is.data.frame(prova)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
sess1 <- import_session()
devtools::load_all(".")
sess1 <- import_session()
#----------------------------------------------#
all <- get_iox(iox_folder, baseline = baseline)
sess1 <- import_session()
#----------------------------------------------#
all <- get_iox(iox_folder, baseline = baseline)
#----------------------------------------------#
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = TRUE)
#----------------------------------------------#
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = FALSE)
if (inter = TRUE) {
all <- get_iox(baseline)
} else {
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = FALSE)
}
if (inter = TRUE) {
all <- get_iox(baseline)
} else {
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = FALSE)
}
vent <- all$vent
choose_comments <- all$tsd_s
choose_comments <- tidyr::unite(choose_comments, col = "subj_drug_dose_unit", .data$subj, .data$drug, .data$dose,.data$unit, sep= " " )
if (inter == FALSE) {
if (missing(comments_tsd)) stop("comments_tsd missing!")
if (length(comments_tsd) == 0) stop("no injection time!")
} else {
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
}
sess1 <- import_session()
devtools::load_all(".")
devtools::load_all(".")
sess1 <- import_session()
sess2 <- import_session(iox_folder = svDialogs::dlg_dir(), inter = FALSE, comments_tsd = c("1 heroin 600 ug/kg", "9 heroin NA NA"),tofill = c(1:2) )
sess2 <- import_session(iox_folder = svDialogs::dlg_dir()$res, inter = FALSE, comments_tsd = c("1 heroin 600 ug/kg", "9 heroin NA NA"),tofill = c(1:2) )
usethis::use_tidy_ci()
usethis::use_tidy_description()
usethis::use_tidy_style()
library(rvent)
library(rvent)
usethis::use_tidy_style()
usethis::use_tidy_ci()
usethis::use_tidy_versions()
usethis::use_tidy_github()
usethis::use_tidy_versions()
usethis::use_tidy_ci()
get_iox(svDialogs::dlg_dir()$res, inter = FALSE)
library(rvent)
get_iox(svDialogs::dlg_dir()$res, inter = FALSE)
get_iox(svDialogs::dlg_dir()$res, inter = FALSE)
usethis::use_tidy_coc()
usethis::use_tidy_ci()
library(rvent)
import_session()
load("~/Documents/R_projects/rvent/R/sysdata.rda")
library(rvent)
summarize_vent(sess1)
devtools::load_all(".")
library(shiny); runApp('~/Desktop/Untitled.R')
shinyApp()
runApp('~/Desktop/Untitled.R')
devtools::load_all(".")
sess1 <- import_session()
View(sess1)
session_plots(sess1)
load("~/Documents/R_projects/rvent/R/sysdata.rda")
session_plots(sess1)
devtools::load_all(".")
devtools::load_all(".")
load("~/Documents/R_projects/rvent/R/sysdata.rda")
autoplot(dat_vent[1])
title <- paste(as.character(dat$cpu_date[1]), metric, dat$subj[1], dat$drug[1], dat$dose[1], dat$unit[1], sep = " ")
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
title <- paste(as.character(dat$cpu_date[1]), dat$subj[1], dat$drug[1], dat$dose[1], dat$unit[1], sep = " ")
file_name <- paste(as.character(dat$cpu_date[1]), dat$subj[1], dat$drug[1], dat$dose[1], sep = "_")
dat$int_min <- as.numeric(dat$int_min)
labs <- as.numeric(seq(min(dat$int_min), max(dat$int_min), 15))
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
View(dat)
devtools::load_all(".")
autoplot(dat_vent)
title <- paste(as.character(dat$cpu_date[1]), metric, dat$subj[1], dat$drug[1], dat$dose[1], dat$unit[1], sep = " ")
file_name <- paste(as.character(dat$cpu_date[1]), dat$subj[1], dat$drug[1], dat$dose[1], sep = "_")
dat$int_min <- as.numeric(dat$int_min)
labs <- as.numeric(seq(min(dat$int_min), max(dat$int_min), 15))
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
measure = "Ti_msec"
dat <- dat[dat$measure == measure,]
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
# facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
measure = c("Ti_msec", "TV_ml")
dat <- dat[dat$measure == measure,]
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
measure = c("Ti_msec", "TV_ml")
dat <- dat[dat$measure %in% measure,]
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
measure = c("Ti_msec", "TV_ml")
dat <- dat[dat$measure %in% measure,]
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
autoplot(dat_vent)
e
measure = c("Ti_msec", "TV_ml")
dat <- dat[dat$measure %in% measure,]
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
dat
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
autoplot(dat_vent)
title <- paste(as.character(dat$cpu_date[1]), dat$subj[1], dat$drug[1], dat$dose[1], dat$unit[1], sep = " ")
# file_name <- paste(as.character(dat$cpu_date[1]), dat$subj[1], dat$drug[1], dat$dose[1], sep = "_")
dat$int_min <- as.numeric(dat$int_min)
labs <- as.numeric(seq(min(dat$int_min), max(dat$int_min), 15))
dat <- dat[dat$measure %in% measure,]
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
measure = c("Ti_msec", "TV_ml")
dat <- dat[dat$measure %in% measure,]
# fig <-
ggplot(dat, aes_string("int_min", vent_stat, col = "measure")) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = mean - sd, ymax = mean + sd)) +
geom_vline(xintercept = 0.5, lty = 4, lwd = 0.5) +
scale_x_continuous(labels = labs, breaks = labs) +
facet_wrap(vars(measure), ncol = 4, scales = "free_y") +
labs(title = title, y = paste(vent_stat, "+/- stdev"), x = "minutes") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5)
)
devtools::load_all(".")
devtools::load_all(".")
session_plots()
session_plots(sess1)
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1)
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
session_plots(sess1, measure = c("Ti_msec", "TV_msec", "EV_ml", "f_bpm"  ))
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
session_plots(sess1, measure = list("Ti_msec", "TV_ml"))
session_plots(sess1, measure = c("Ti_msec", "TV_ml", "EV_ml", "f_bpm"  ))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = c("Ti_msec", "TV_ml", "EV_ml", "f_bpm"  ))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = c("Ti_msec", "TV_ml", "EV_ml", "f_bpm"  ))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots(sess1, measure = c("Ti_msec", "TV_ml", "EV_ml", "f_bpm"  ))
devtools::load_all("~/Documents/R_projects/rvent")
session_plots()
session_plots(sess1)
measure <- c("ALL", "1")
if(length(measure) > 1 & "ALL" %in% measure) {
measure <- "ALL"
}
measure <- c("3", "1")
if(length(measure) > 1 && "ALL" %in% measure) {
measure <- "ALL"
}
devtools::load_all("~/Documents/R_projects/rvent")
devtools::load_all("~/Documents/R_projects/rvent")
import_session()
subj
x <- c(1 , 2, 1)
anyDuplicated(x)
x <- c(1 , 2, 3)
anyDuplicated(x)
anyDuplicated(subj)
load("/Users/heverz/Documents/R_projects/rvent_app/temp.RDS")
all_data <- readRDS("~/Desktop/all_data.rds")
vent <- all_data$vent
choose_comments <- all_data$tsd_s
choose_comments <- tidyr::unite(choose_comments, col = "subj_drug_dose_unit", .data$subj, .data$drug, .data$dose, .data$unit, sep = " ")
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
vent <- all_data$vent
choose_comments <- all_data$tsd_s
choose_comments <- tidyr::unite(choose_comments, col = "subj_drug_dose_unit", .data$subj, .data$drug, .data$dose, .data$unit, sep = " ")
if (inter == FALSE) {
if (missing(comments_tsd)) stop("comments_tsd missing!")
if (length(comments_tsd) == 0) stop("no injection time!")
} else {
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
}
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
tsd_s <- choose_comments[choose_comments$subj_drug_dose_unit %in% comments_tsd, ]
tsd_s <- tidyr::separate(tsd_s, .data$subj_drug_dose_unit, c("subj", "drug", "dose", "unit"), fill = "right", extra = "merge")
tsd_s[tsd_s == "NA"] <- NA
na_pos <- dplyr::arrange(as.data.frame(which(is.na(tsd_s), arr.ind = TRUE)), row)
if (inter == TRUE) {
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <- paste(list("subj =", "; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in: ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x, ])
tsd_s[x, as.vector(is.na(tsd_s[x, ]))] <- tofill
}
} else {
tofill <- NULL
}
}
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
for (x in as.numeric(unique(na_pos$row))) {
mesg <- paste(list("subj =", "; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in: ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x, ])
tsd_s[x, as.vector(is.na(tsd_s[x, ]))] <- tofill
}
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
devtools::load_all(".")
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
load(svDialogs::dlg_open())
load(svDialogs::dlg_open()$res)
load(svDialogs::dlg_open()$res)
readRDS(svDialogs::dlg_open()$res)
readRDS(svDialogs::dlg_open()$res)
prova <- readRDS(svDialogs::dlg_open()$res)
vent <- all_data$vent
choose_comments <- all_data$tsd_s
choose_comments <- tidyr::unite(choose_comments, col = "subj_drug_dose_unit", .data$subj, .data$drug, .data$dose, .data$unit, sep = " ")
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
all_data <- prova
vent <- all_data$vent
choose_comments <- all_data$tsd_s
c
choose_comments <- tidyr::unite(choose_comments, col = "subj_drug_dose_unit", .data$subj, .data$drug, .data$dose, .data$unit, sep = " ")
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
tsd_s <- choose_comments[choose_comments$subj_drug_dose_unit %in% comments_tsd, ]
tsd_s <- tidyr::separate(tsd_s, .data$subj_drug_dose_unit, c("subj", "drug", "dose", "unit"), fill = "right", extra = "merge")
tsd_s[tsd_s == "NA"] <- NA
na_pos <- dplyr::arrange(as.data.frame(which(is.na(tsd_s), arr.ind = TRUE)), row)
for (x in as.numeric(unique(na_pos$row))) {
mesg <- paste(list("subj =", "; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in: ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x, ])
tsd_s[x, as.vector(is.na(tsd_s[x, ]))] <- tofill
}
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
baseline <- 10
baseline <- 30
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
baseline = 30, bin = 3, form = "mean"
bin = 3
form = "mean"
dat2 <- lapply(dat, find_bins, bin = bin)
dat <- vent_jn
dat2 <- lapply(dat, find_bins, bin = bin)
devtools::load_all(".")
dat2 <- lapply(dat, find_bins, bin = bin)
# filter based on some acceptance criteria in rats
dat <- dat[
dat$TV_ml >= 0.04 &
dat$TV_ml <= 10 &
dat$f_bpm >= 10 &
dat$f_bpm <= 250 &
dat$Ti_msec >= 100 &
dat$Ti_msec <= 2000 &
dat$Te_msec >= 120 &
dat$Te_msec <= 2000,
]
dat <- dat[!is.na(dat$time_s), ]
dat
load("~/Documents/R_projects/rvent/R/sysdata.rda")
vsummary <- summarize_vent(sess1, inter = FALSE)
devtools::load_all(".")
devtools::load_all(".")
load("~/Documents/R_projects/rvent/R/sysdata.rda")
vsummary <- summarize_vent(sess1, inter = FALSE)
vsummary
load("~/Desktop/all_data (1).rds")
all_data <- readRDS(svDialogs::dlg_open()$res)
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
t
vent <- all_data$vent
choose_comments <- all_data$tsd_s
choose_comments <- tidyr::unite(choose_comments, col = "subj_drug_dose_unit", .data$subj, .data$drug, .data$dose, .data$unit, sep = " ")
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
tsd_s <- choose_comments[choose_comments$subj_drug_dose_unit %in% comments_tsd, ]
tsd_s[tsd_s == "NA"] <- NA
na_pos <- dplyr::arrange(as.data.frame(which(is.na(tsd_s), arr.ind = TRUE)), row)
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <- paste(list("subj =", "; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in: ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x, ])
tsd_s[x, as.vector(is.na(tsd_s[x, ]))] <- tofill
}
)
na_pos <- dplyr::arrange(as.data.frame(which(is.na(tsd_s), arr.ind = TRUE)), row)
tsd_s <- choose_comments[choose_comments$subj_drug_dose_unit %in% comments_tsd, ]
tsd_s <- tidyr::separate(tsd_s, .data$subj_drug_dose_unit, c("subj", "drug", "dose", "unit"), fill = "right", extra = "merge")
tsd_s[tsd_s == "NA"] <- NA
na_pos <- dplyr::arrange(as.data.frame(which(is.na(tsd_s), arr.ind = TRUE)), row)
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <- paste(list("subj =", "; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in: ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x, ])
tsd_s[x, as.vector(is.na(tsd_s[x, ]))] <- tofill
}
)
na_pos <- dplyr::arrange(as.data.frame(which(is.na(tsd_s), arr.ind = TRUE)), row)
for (x in as.numeric(unique(na_pos$row))) {
mesg <- paste(list("subj =", "; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in: ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x, ])
tsd_s[x, as.vector(is.na(tsd_s[x, ]))] <- tofill
}
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
devtools::load_all(".")
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
baseline = 30
vent_jn <- normalizetime_vent(dat = vent, tsd_s = tsd_s, tofill = tofill, baseline = baseline)
saveRDS(vent_jn,"vent_jndemo.RDS")
summarize_vent(vent_jn, inter = TRUE, filter_vals = FALSE)
devtools::load_all(".")
summarize_vent(vent_jn, inter = TRUE, filter_vals = FALSE)
summarize_vent(vent_jn, inter = TRUE, filter_vals = TRUE)
summarize_vent(vent_jn, inter = TRUE, filter_vals = FALSE)
styler:::style_active_pkg()
install.packages("httr")
