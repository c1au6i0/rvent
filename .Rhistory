tsd_s[is.na(tsd_s)]
is.na(tsd_s)
tsd_s[is.na(tsd_s)]
tsd_s[is.na(tsd_s)]
class(tsd_s)
if(inter == FALSE){
if (missing(tofill)) stop("tofill missing!")
tsd_s[is.na(tsd_s)] <- tofill
}else{
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
}
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
if(inter == FALSE){
if (missing(tofill)) stop("tofill missing!")
tsd_s[is.na(tsd_s)] <- tofill
} else {
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
}
nrow(na_pos) > 0
if(inter == TRUE){
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
} else {
tofill <- NULL
}
}
devtools::load_all(".")
import_session2()
devtools::load_all(".")
import_session2()
devtools::load_all(".")
import_session2()
import_session2()
usethis::use_test("vent")
load("~/Documents/R_projects/rvent/R/sysdata.rda")
class(dat_vent)
attributes(dat_vent)
names(attributes(dat_vent))
new_vent(dat_vent)
testthat("new_vent_ok",{
expect_success(new_vent(dat_vent))
})
expect_success(new_vent(dat_vent))
new_vent(dat_vent)
prova <- new_vent(dat_vent)
class(prova)
prova <- new_vent(dat_vent)
devtools::load_all(".")
prova <- new_vent(dat_vent)
class(prova)
expect_s3_class("vent",new_vent(dat_vent))
source('~/Documents/R_projects/rvent/tests/testthat/test-vent.R', echo=TRUE)
expect_s3_class(new_vent(dat_vent), "vent")
new_vent(as.list(dat_vent))
validate_vent(dat_vent2)
dat_vent2 <- new_vent(dat_vent)
validate_vent(dat_vent2)
as.data.frame(sapply(dat_vent, typeof))
devtools::load_all(".")
validate_vent(dat_vent)
obtained <- as.data.frame(sapply(dat, typeof))
expected_types <- c("double", "character", "character", "character", "character", "double", "integer", "double",
"double",  "double", "integer",  "double", "double")
expected_names <- c("cpu_date", "subj", "drug", "dose", "unit", "int_min", "measure",
"mean", "median", "sd", "n", "baseline", "bin")
!identical(expected_names,row.names(obtained))
identical(expected_names,row.names(obtained))
identical(expected_types, obtained[[1]])
obtained[[1]]
expected_types, as.list(obtained[[1]])
expected_types, as.list(obtained[[1]]
expected_types, as.list(obtained[[1]])
identical(expected_types, as.list(obtained[[1]])
)
expected_types
(!identical(expected_types, as.character(obtained[[1]]))
identical(expected_types, as.character(obtained[[1]]))
validate_vent(dat_vent)
devtools::load_all(".")
devtools::load_all(".")
validate_vent(dat_vent)
install.packages("styler")
styler:::set_style_transformers()
styler:::style_active_pkg()
# install.packages("devtools")
devtools::install_github("c1au6i0/rvent")
library(rvent)
library(rvent)
sess1 <- import_session()
summarize_vent(sess1)
sterr()
stderr()
library(rvent)
sess1 <- import_session()
library(rvent)
sess1 <- import_session()
library(rvent)
library(rvent)
sess1 <- import_session()
library(rvent)
sess1 <- import_session()
summarize_vent(sess1)
session_plots(sess1, bin = 3)
library(rvent)
devtools::install_github("c1au6i0/rvent")
devtools::load_all(".")
library(rvent)
sess1 <- import_session()
vent <- dat
comments <- stats::na.omit(unique(vent$info[vent$string_type == c("comment")]))
# eliminate comments without subjects (i.e. numbers)
comments <- comments[stringr::str_detect(comments, "[1-9]")]
# tsd = time_injection subject and drug
tsd <- vent[vent$info %in% comments, c("timecpu_s", "info")]
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd <- tidyr::separate(tsd, .data$info, sep = "(?<=[0-9])\\s", c("subj", "info"), extra = "merge")
sd
vent <- dat
comments <- stats::na.omit(unique(vent$info[vent$string_type == c("comment")]))
# eliminate comments without subjects (i.e. numbers)
comments <- comments[stringr::str_detect(comments, "[1-9]")]
# tsd = time_injection subject and drug
tsd <- vent[vent$info %in% comments, c("timecpu_s", "info")]
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd <- tidyr::separate(tsd, .data$info, sep = "(?<=[0-9])\\s", c("subj", "info"), extra = "merge")
vent <- dat
comments <- stats::na.omit(unique(vent$info[vent$string_type == c("comment")]))
# eliminate comments without subjects (i.e. numbers)
comments <- comments[stringr::str_detect(comments, "[1-9]")]
# tsd = time_injection subject and drug
tsd <- vent[vent$info %in% comments, c("timecpu_s", "info")]
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
tsd
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd
vent <- dat
comments <- stats::na.omit(unique(vent$info[vent$string_type == c("comment")]))
# eliminate comments without subjects (i.e. numbers)
comments <- comments[stringr::str_detect(comments, "[1-9]")]
# tsd = time_injection subject and drug
tsd <- vent[vent$info %in% comments, c("timecpu_s", "info")]
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
tsd
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
tsd
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd
tsd$info <- stringr::str_remove_all(tsd$info, "(?!/)[:punct:]")
tsd
# now we split the comment, tsd_s = tsd separated
tsd_s <- tidyr::separate(tsd, .data$info, c("drug", "dose", "unit"), fill = "right", extra = "merge")
rm_subj <- stringr::str_extract(unique(vent$subj_drug), "[0-9]+")
tsd_s <- tsd_s[tsd_s$subj %in%  rm_subj, ]
tsd_s
vent <- dat
comments <- stats::na.omit(unique(vent$info[vent$string_type == c("comment")]))
# eliminate comments without subjects (i.e. numbers)
comments <- comments[stringr::str_detect(comments, "[1-9]")]
# tsd = time_injection subject and drug
tsd <- vent[vent$info %in% comments, c("timecpu_s", "info")]
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd <- tidyr::separate(tsd, .data$info, sep = "(?<=[0-9])\\s", c("subj", "info"), extra = "merge")
vent <- dat
comments <- stats::na.omit(unique(vent$info[vent$string_type == c("comment")]))
# eliminate comments without subjects (i.e. numbers)
comments <- comments[stringr::str_detect(comments, "[1-9]")]
# tsd = time_injection subject and drug
tsd <- vent[vent$info %in% comments, c("timecpu_s", "info")]
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd <- tidyr::separate(tsd, .data$info, sep = "(?<=[0-9])\\s", c("subj", "info"), extra = "merge")
vent <- dat
comments <- stats::na.omit(unique(vent$info[vent$string_type == c("comment")]))
# eliminate comments without subjects (i.e. numbers)
comments <- comments[stringr::str_detect(comments, "[1-9]")]
# tsd = time_injection subject and drug
tsd <- vent[vent$info %in% comments, c("timecpu_s", "info")]
tsd$info <- stringr::str_remove_all(tsd$info, "^([:alpha:]{3,4}\\s)|^[:alpha:]{3,4}") # rat rats or ray
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
tsd
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd
tsd$info <- stringr::str_remove_all(tsd$info, "(?!/)[:punct:]")
# now we split the comment, tsd_s = tsd separated
tsd_s <- tidyr::separate(tsd, .data$info, c("drug", "dose", "unit"), fill = "right", extra = "merge")
rm_subj <- stringr::str_extract(unique(vent$subj_drug), "[0-9]+")
tsd_s <- tsd_s[tsd_s$subj %in%  rm_subj, ]
tsd_s
devtools::load_all(".")
sess1 <- import_session()
View(sess1)
sess1 <- import_session()
sess1 <- import_session()
devtools::load_all(".")
sess1 <- import_session()
toadd <- tsd[stringr::str_detect(tsd$info, detect), ] #get comments with "number number number"
tsd2 <- dplyr::setdiff(tsd, toadd) # remove them
toadd <- tidyr::separate(toadd, .data$info, sep = sep, c("subj", "info"),
extra = "merge") # separate subject from rest: first space between number and word
n_subj <- unlist(stringr::str_split(unlist(toadd$subj), " ")) # create a column with subject
col_subj <- n_subj[n_subj != ""]
rep_subj <- stringr::str_count(toadd$subj, "[0-9]") # how many subjects in each comment?
toadd <- toadd[rep(seq_len(nrow(toadd)), rep_subj),] # repeat rows for each subject
toadd$subj <- col_subj # substitute subject
tsd2 <- tidyr::separate(tsd, .data$info, sep = "(?<=[0-9])\\s", c("subj", "info"),
extra = "merge")
tsd2 <- rbind(tsd, toadd)
toadd <- tsd[stringr::str_detect(tsd$info, detect), ] #get comments with "number number number"
toadd
tsd2 <- dplyr::setdiff(tsd, toadd) # remove them
toadd <- tidyr::separate(toadd, .data$info, sep = sep, c("subj", "info"),
extra = "merge") # separate subject from rest: first space between number and word
n_subj <- unlist(stringr::str_split(unlist(toadd$subj), " ")) # create a column with subject
col_subj <- n_subj[n_subj != ""]
rep_subj <- stringr::str_count(toadd$subj, "[0-9]") # how many subjects in each comment?
toadd <- toadd[rep(seq_len(nrow(toadd)), rep_subj),] # repeat rows for each subject
toadd$subj
toadd <- tsd[stringr::str_detect(tsd$info, detect), ] #get comments with "number number number"
tsd2 <- dplyr::setdiff(tsd, toadd) # remove them
toadd <- tidyr::separate(toadd, .data$info, sep = sep, c("subj", "info"),
extra = "merge") # separate subject from rest: first space between number and word
n_subj
col_subj <- n_subj[n_subj != ""]
col_subj
rep_subj <- stringr::str_count(toadd$subj, "[0-9]") # how many subjects in each comment?
rep_subj
toadd
toadd <- toadd[rep(seq_len(nrow(toadd)), rep_subj),] # repeat rows for each subject
toadd
col_subj
toadd$subj <- col_subj # substitute subject
toadd$subj
tsd2 <- tidyr::separate(tsd, .data$info, sep = "(?<=[0-9])\\s", c("subj", "info"),
extra = "merge")
tsd2
tsd2 <- rbind(tsd, toadd)
tsd
tsd2 <- rbind(tsd2, toadd)
tsd2
devtools::load_all(".")
sess1 <- import_session()
devtools::load_all(".")
sess1 <- import_session()
devtools::load_all(".")
sess1 <- import_session()
#"number number number"
tsd <- split_comments(tsd, detect = "[0-9]\\s[0-9]+", sep =  "(?<=[0-9])\\s(?=[A-z])", rem = "")
tsd <- tidyr::unite(tsd, "info", .data$subj, .data$info, sep = " " )
tsd
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
tsd
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
source('~/Documents/R_projects/rvent/R/split_comments.R')
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
source('~/Documents/R_projects/rvent/R/split_comments.R')
source('~/Documents/R_projects/rvent/R/split_comments.R')
devtools::load_all(".")
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
#' split_comments reorganize a dataframe of time and commets in order to have a subj for each row. It is use internally
#' by \code{\link{inj_comments}}
#'
#' @param tsd dataframe of comments (2 columns).
#' @param detec regexp for detecting rows with multiple subjects
#' @param sep regexp  for separating subjects from rest
#' @rem the string to remove
#' @return a dataframe tsd_s
#' @importFrom rlang .data
#' @export
split_comments <- function(tsd, detect, sep, rem) {
browser()
toadd <- tsd[stringr::str_detect(tsd$info, detect), ] #get comments with "number number number"
tsd2 <- dplyr::setdiff(tsd, toadd) # remove them
toadd <- tidyr::separate(toadd, .data$info, sep = sep, c("subj", "info"),
extra = "merge") # separate subject from rest: first space between number and word
n_subj <- unlist(stringr::str_split(unlist(toadd$subj), " ")) # create a column with subject
col_subj <- n_subj[n_subj != ""]
rep_subj <- stringr::str_count(toadd$subj, "[0-9]") # how many subjects in each comment?
toadd <- toadd[rep(seq_len(nrow(toadd)), rep_subj),] # repeat rows for each subject
toadd$subj <- col_subj # substitute subject
tsd2 <- tidyr::separate(tsd, .data$info, sep = "(?<=[0-9])\\s", c("subj", "info"),
extra = "merge")
tsd2 <- rbind(tsd2, toadd)
return(tsd2)
}
#space between a number and a word that is not "and"
tsd <- split_comments(tsd, detect = "and", sep = "(?<=[0-9])\\s(?=[A-z])(?!and)", rem = "and")
toadd <- tsd[stringr::str_detect(tsd$info, detect), ] #get comments with "number number number"
tsd2 <- dplyr::setdiff(tsd, toadd) # remove them
toadd <- tidyr::separate(toadd, .data$info, sep = sep, c("subj", "info"),
extra = "merge") # separate subject from rest: first space between number and word
n_subj <- unlist(stringr::str_split(unlist(toadd$subj), " ")) # create a column with subject
col_subj <- n_subj[n_subj != ""]
rep_subj <- stringr::str_count(toadd$subj, "[0-9]") # how many subjects in each comment?
toadd <- toadd[rep(seq_len(nrow(toadd)), rep_subj),] # repeat rows for each subject
toadd$subj <- col_subj # substitute subject
col_subj
devtools::load_all(".")
devtools::load_all(".")
sess1 <- import_session()
styler:::style_selection()
sess1 <- import_session()
session_plots(sess1)
library(rvent)
install.packages(c("glmnet", "haven", "mgcv", "nlme", "prodlim", "Rcpp", "rvest", "survival", "testthat"))
install.packages(c("glmnet", "haven", "mgcv", "nlme", "prodlim", "Rcpp", "rvest", "survival", "testthat"))
library(vent)
library(rvent)
prova <- get_iox(svDialogs::dlg_dir(), inter = TRUE)
tryCatch(
prova <- get_iox(svDialogs::dlg_dir(), inter = TRUE),
error = function(c){
stop(c)
}
)
x <- tryCatch(
prova <- get_iox(svDialogs::dlg_dir(), inter = TRUE),
error = function(c){
stop(c)
}
)
x
x <- tryCatch(
prova <- get_iox(svDialogs::dlg_dir(), inter = TRUE),
error = function(c){
stop(c)
}
)
x <- tryCatch(
prova <- get_iox(svDialogs::dlg_dir(), inter = TRUE),
error = function(c){
c$message
}
)
x <- tryCatch(
prova <- get_iox(svDialogs::dlg_dir()$res, inter = TRUE),
error = function(c){
c$message
}
)
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = TRUE),
error = function(c){
msg <- conditionMessage(c)
}
)
x
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
msg <- conditionMessage(c)
}
)
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
c
}
)
x
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
conditionMessage(c)
}
)
devtools::load_all(".")
x <- tryCatch(
get_iox(svDialogs::dlg_dir()$res, inter = FALSE),
error = function(c){
conditionMessage(c)
}
)
library(rvent)
library(rvent)
devtools::load_all(".")
get_iox()
prova <- get_iox()
is.data.frame(prova)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
sess1 <- import_session()
devtools::load_all(".")
sess1 <- import_session()
#----------------------------------------------#
all <- get_iox(iox_folder, baseline = baseline)
sess1 <- import_session()
#----------------------------------------------#
all <- get_iox(iox_folder, baseline = baseline)
#----------------------------------------------#
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = TRUE)
#----------------------------------------------#
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = FALSE)
if (inter = TRUE) {
all <- get_iox(baseline)
} else {
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = FALSE)
}
if (inter = TRUE) {
all <- get_iox(baseline)
} else {
all <- get_iox(iox_folder = iox_folder, baseline = baseline, inter = FALSE)
}
vent <- all$vent
choose_comments <- all$tsd_s
choose_comments <- tidyr::unite(choose_comments, col = "subj_drug_dose_unit", .data$subj, .data$drug, .data$dose,.data$unit, sep= " " )
if (inter == FALSE) {
if (missing(comments_tsd)) stop("comments_tsd missing!")
if (length(comments_tsd) == 0) stop("no injection time!")
} else {
comments_tsd <- svDialogs::dlg_list(choose_comments$subj_drug_dose_unit, multiple = TRUE, title = "Choose the comments containing subject and drug administered")$res
}
sess1 <- import_session()
devtools::load_all(".")
devtools::load_all(".")
sess1 <- import_session()
sess2 <- import_session(iox_folder = svDialogs::dlg_dir(), inter = FALSE, comments_tsd = c("1 heroin 600 ug/kg", "9 heroin NA NA"),tofill = c(1:2) )
sess2 <- import_session(iox_folder = svDialogs::dlg_dir()$res, inter = FALSE, comments_tsd = c("1 heroin 600 ug/kg", "9 heroin NA NA"),tofill = c(1:2) )
usethis::use_tidy_ci()
usethis::use_tidy_description()
usethis::use_tidy_style()
library(rvent)
library(rvent)
usethis::use_tidy_style()
usethis::use_tidy_ci()
usethis::use_tidy_versions()
usethis::use_tidy_github()
usethis::use_tidy_versions()
usethis::use_tidy_ci()
get_iox(svDialogs::dlg_dir()$res, inter = FALSE)
library(rvent)
get_iox(svDialogs::dlg_dir()$res, inter = FALSE)
get_iox(svDialogs::dlg_dir()$res, inter = FALSE)
usethis::use_tidy_coc()
usethis::use_tidy_ci()
library(rvent)
import_session()
load("~/Documents/R_projects/rvent/R/sysdata.rda")
library(rvent)
summarize_vent(sess1)
devtools::load_all(".")
library(shiny); runApp('~/Desktop/Untitled.R')
shinyApp()
runApp('~/Desktop/Untitled.R')
devtools::load_all(".")
sess1 <- import_session()
View(sess1)
session_plots(sess1)
load("~/Documents/R_projects/rvent/R/sysdata.rda")
session_plots(sess1)
