get(ls())
ls()
get(ls())
expected_vent <- as.data.frame(sapply(dat_vent, typeof))
View(comments_tofill)
usethis::use_data(comments_tofill, dat_vent, expected_vent, sess1, vent_head, internal = TRUE, overwrite = TRUE)
devtools::install_deps()
devtools::install_deps()
devtools::install_github("c1au6i0/rvent")
devtool::install_dev()
devtools::install_dev()
devtools::install_deps()
devtools::install_deps()
remove.packages("svDialogs")
install.packages("svDialogs")
devtools::install_deps()
remove.packages("svDialogs")
devtools::install_deps()
remove.packages("svDialogs")
devtools::install_deps()
load("~/Documents/R_projects/rvent/R/sysdata.rda")
devtools::load_all(".")
load("~/Documents/R_projects/rvent/R/sysdata.rda")
validate_vent(dat_vent)
validate_vent(dat_vent)
obtained <- as.data.frame(sapply(dat, typeof))
if(!all.equal(expect_vent == obtained)) stop("Wrong columns: check number of columns and or/and their types")
devtools::load_all(".")
validate_vent(dat_vent)
devtools::load_all(".")
validate_vent(dat_vent)
devtools::load_all(".")
validate_vent(dat_vent)
View(expected_vent)
devtools::load_all(".")
validate_vent(dat_vent)
View(expected_vent)
obtained <- as.data.frame(sapply(dat_vent, typeof))
View(obtained)
devtools::load_all(".")
obtained <- as.data.frame(sapply(dat_vent, typeof))
remove(obtained)
validate_vent(dat_vent)
list(expected_vent)
as.data.frame(expected_vent)
row.names(expected_vent)
paste(row.names(expected_vent), sep = " ")
warnings(paste(row.names(expected_vent), sep = " "))
warning(paste(row.names(expected_vent), sep = " "))
warning(paste(row.names(expected_vent), sep = "  "))
warning(paste(row.names(expected_vent), collapse = "  "))
warning(paste(row.names(expected_vent), collapse = ", "))
if(row.names(expected_vent) != row.names(obtained)) stop("Expected columns are", paste(row.names(expected_vent), collapse = ", "))
stop("Expected columns are", paste(row.names(expected_vent), collapse = ", "))
stop("Expected columns are: ", paste(row.names(expected_vent), collapse = ", "))
expected_vent[[1]]
attributes(dat_vent)
class(dat_vent)
dat_vent <- new_vent(dat_vent)
attributes(dat_vent)
names(attributes(dat_vent))
View(expected_vent)
expected_vent[[1]]
row.names(expected_vent)
devtools::load_all(".")
validate_vent(dat_vent)
devtools::load_all(".")
validate_vent(dat_vent)
devtools::load_all(".")
validate_vent(dat_vent)
devtools::load_all(".")
validate_vent(dat_vent)
!c("bin", "baseline") %in% names(attributes(dat_vent))
any(!c("bin", "baseline") %in% names(attributes(dat_vent)))
devtools::load_all(".")
devtools::load_all(".")
validate_vent(dat_vent)
load("~/Documents/R_projects/rvent/R/sysdata.rda")
iox_head <- vent_head
usethis::use_data(dat_vent, comments_tofill, iox_head, sess1, internal = TRUE, overwrite = TRUE)
load("~/Documents/R_projects/rvent/R/sysdata.rda")
names(dat_vent)
names(sess1$rat1_heroin)
devtools::load_all(".")
find_bins(sess1$rat1_heroin, 30, 3)
devtools::load_all(".")
devtools::load_all(".")
prova <- median_bins(sess1$rat1_heroin)
View(dat)
glimpse(dat)
tidyr::glimpse(dat)
dplyr::glimpse(dat)
dat_vent <- dat_long %>%
dplyr::group_by(.data$cpu_date, .data$subj_drug, .data$dose, .data$unit, .data$int_min, .data$measure) %>%
dplyr::summarise(mean = mean(.data$value),
median = median(.data$value),
sd = sd(.data$value),
n = dplyr::n(),
baseline = baseline,
bin = bin) %>%
tidyr::separate(.data$subj_drug, c("subj", "drug"), remove = TRUE)
col_melt <- which(names(dat_all) %in% c("Ti_msec", "Sr_per"))
library(rvent)
sess1 <- import_session()
session_plots(sess1, inter = FALSE, bin = 1)
session_plots(sess1, inter = FALSE, bin = 1)
devtools::load_all(".")
session_plots(sess1, inter = FALSE, bin = 1)
devtools::load_all(".")
sess1 <- import_session()
library(rvent)
sess1 <- import_session()
session_plots(sess1, inter = FALSE, bin = 1)
session_plots(sess1, bin = 1)
library(rvent)
library(rvent)
sess1 <- import_session()
session_plots(sess1, inter = FALSE, bin = 10)
summarize_vent(sess1)
usethis::use_package(readxl)
install.packages("readxl")
usethis::use_package(readxl)
usethis::use_package("readxl")
devtools::load_all(".")
load("~/Documents/R_projects/rvent/R/sysdata.rda")
summarize_vent(sess1)
View(dat_sm)
dat_vent$cpu_date[1]
as_string(dat_vent$cpu_date[1]))
as_string(dat_vent$cpu_date[1])
as_string(dat_vent$cpu_date[1])
as.character(dat_vent$cpu_date[1])
paste0("summary_", as.character(dat_vent$cpu_date[1], ".xlsx")
writexl::write_xlsx(dat_fs, "summary.xlsx")
} else {
return(list(dat_long = dat_long, dat_vent = dat_vent, dat_sm = dat_sm, dat_fs = dat_fs))
}
}
paste0("summary_", as.character(dat_vent$cpu_date[1]), ".xlsx")
devtools::load_all(".")
summarize_vent(sess1)
sess1 <- import_session(sess1)
sess1 <- import_session(sess1)
sess1 <- import_session(sess1)
devtools::load_all("~/Documents/R_projects/rvent")
sess1 <- import_session(sess1)
devtools::load_all("~/Documents/R_projects/rvent")
sess1 <- import_session(sess1)
baseline <- as.numeric(baseline) * 60 # 30 min baseline
baseline
sess1 <- import_session(sess1)
baseline
sess1 <- import_session(sess1)
sess1 <- import_session()
devtools::load_all("~/Documents/R_projects/rvent")
sess1 <- import_session()
summarize_vent(sess1)
bind_summary()
purrr:map_dfr(files_imp, readx:read_xlsx)
purrr::map_dfr(files_imp, readx:read_xlsx)
purrr::map_dfr(files_imp, readxl::read_xlsx)
readxl::read_xlsx(files_imp[1])
prova <- readxl::read_xlsx(files_imp[1])
View(prova)
prova <- readxl::read_excel(files_imp[1])
View(prova)
install.packages("rio")
prova <- rio::import_list(files_imp[1])
View(prova)
prova2 <- rio::import_list(files_imp[2])
rbind(prova, prova2)
x <- rbind(prova, prova2)
View(x)
prova <- do(rio::import_list(files_imp[1]), rbind)
prova <- do.call(rbind, rio::import_list(files_imp[1]))
View(prova)
mylist <- lapply(excel_sheets(files_imp[1]), read_excel, path = files_imp[1])
mylist <- lapply(readxl::excel_sheets(files_imp[1]), readxl::read_excel, path = files_imp[1])
View(mylist)
rio::import_list(files_imp[1], rbind = TRUE)
rio::import_list(files_imp[1], rbind = TRUE, rbind_label = FALSE)
rio::import_list(files_imp[1], rbind = TRUE)
rio::import_list(files_imp, rbind = TRUE)
prova <- rio::import_list(files_imp, rbind = TRUE)
View(prova)
prova <- rio::import_list(files_imp, rbind = TRUE)
prova <- rio::import_list(files_imp[1], rbind = TRUE)
files_imp[1]
rio::import_list(files_imp[1], rbind = TRUE)
prova <-   rio::import_list(files_imp[1], rbind = TRUE)
View(prova)
prova2 <-   rio::import_list(files_imp, rbind = TRUE)
prova2 <-   rio::import_list(files_imp, rbind = TRUE)
prova3 <-   rio::import_list(files_imp[1], rbind = TRUE)
prova3 <-   rio::import_list(files_imp, rbind = TRUE)
prova3 <- purrr::map_dfr(files_imp, rio::import_list, rbind = TRUE)
dat_all <- purrr::map_dfr(files_imp, rio::import_list, rbind = TRUE)
dat_all
suppressWarnings(dat_fs <- split.data.frame(dat_all, dat_all$measure))
unique(dat_all$cpu_date)
as.character(unique(dat_all$cpu_date))
paste(as.character(unique(dat_all$cpu_date)), collapse = "_")
dates <- paste(as.character(unique(dat_all$cpu_date)), collapse = "_")
paste0("summary_", dates, ".xlsx")
writexl::write_xlsx(dat_fs, paste0("summary_", dates, ".xlsx"))
devtools::load_all("~/Documents/R_projects/rvent")
bind_summary()
devtools::load_all("~/Documents/R_projects/rvent")
bind_summary()
if(inter == TRUE) {
svDialogs::dlg_message("Next select the folder where to save the summary", type = "ok")$res
file_p <- svDialogs::dlg_dir()$res
setwd(file_p)
writexl::write_xlsx(dat_fs, paste0("summary_", as.character(dat_vent$cpu_date[1]), ".xlsx"))
} else {
return(dat_fs)
}
devtools::load_all("~/Documents/R_projects/rvent")
bind_summary()
devtools::load_all("~/Documents/R_projects/rvent")
bind_summary()
devtools::load_all("~/Documents/R_projects/rvent")
bind_summary()
bind_summary()
devtools::load_all("~/Documents/R_projects/rvent")
devtools::load_all("~/Documents/R_projects/rvent")
bind_summary()
bind_summary()
bind_summary()
bind_summary()
names(dat_all)
dplyr::select(dat_all, -dat_all$_file)
dplyr::select(dat_all, -.data$_file)
dat_all <- purrr::map_dfr(files_imp, rio::import_list, rbind = TRUE, rbind_label = "label")
names(dat_all)
dat_all <- purrr::map_dfr(files_imp, rio::import_list, rbind = TRUE, rbind_label = "label")
names(dat_all)
dplyr::select(dat_all, -.data$label)
dat_all[, names(dat_all) != "label"]
prova  <- dat_all[, names(dat_all) != "label"]
View(prova)
devtools::load_all("~/Documents/R_projects/rvent")
usethis::use_package("rio")
bsummary <- bind_summary("/Users/heverz/Documents/R_projects/rvent/inst/extdata/summary", inter = FALSE)
bsummary <- bind_summary("/Users/heverz/Documents/R_projects/rvent/inst/extdata/summary", inter = FALSE)
devtools::load_all("~/Documents/R_projects/rvent")
bsummary <- bind_summary("/Users/heverz/Documents/R_projects/rvent/inst/extdata/summary", inter = FALSE)
devtools::load_all("~/Documents/R_projects/rvent")
bsummary <- bind_summary("/Users/heverz/Documents/R_projects/rvent/inst/extdata/summary", inter = FALSE)
devtools::load_all("~/Documents/R_projects/rvent")
devtools::load_all("~/Documents/R_projects/rvent")
bsummary <- bind_summary("/Users/heverz/Documents/R_projects/rvent/inst/extdata/summary", inter = FALSE)
bsummary_exp <- "/Users/heverz/Documents/R_projects/rvent/tests/testthat/bsummary_exp"
test_that("bind_summary output",{
expect_known_output(bsummary, bsummary_exp, print = TRUE)
})
devtools::load_all(".")
load("~/Documents/R_projects/rvent/R/sysdata.rda")
summarize_vent(sess1)
tidyr::pivot_longer(dat_all, cols = col_melt[1]:col_melt[2], names_to = "measure",
values_to = "value")
col_melt[1]:col_melt[2]
# wide to long
prova <- col_melt[1]:col_melt[2]
# wide to long
prova <- col_melt[1]:col_melt[2]
dat_long <- tidyr::pivot_longer(dat_all, cols = !!prova, names_to = "measure",
values_to = "value")
dat_long <- data.table::melt(as.data.table(dat_all), measure.vars = col_melt[1]:col_melt[2],
variable.name = "measure", value.name = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols = !!!prova, names_to = "measure",
values_to = "value")
dat_all
col_melt[1]:col_melt[2]
dat_long <- tidyr::pivot_longer(dat_all, cols = !!col_melt[1]:!!col_melt[2], names_to = "measure",
values_to = "value")
col_melt[1]:col_melt[2]
dat_long <- tidyr::pivot_longer(dat_all, cols = 15:34, names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols = c(15:34), names_to = "measure",
values_to = "value")
# wide to long
prova <- names(dat_all)[col_melt[1]:col_melt[2]]
prova
dat_long <- tidyr::pivot_longer(dat_all, cols = !!prova, names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols = prova, names_to = "measure",
values_to = "value")
prova
dat_long <- tidyr::pivot_longer(dat_all, cols =  prova, names_to = "measure",
values_to = "value")
col_melt
dat_long <- tidyr::pivot_longer(dat_all, cols =  col_melt, names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  !!col_melt, names_to = "measure",
values_to = "value")
paste(".data$", prova)
paste(".data$", prova, sep ="")
prava2<- paste(".data$", prova, sep ="")
dat_long <- tidyr::pivot_longer(dat_all, cols =  !!prov2a, names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  !!prova2, names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  !!!prova2, names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  eval(parse_expr(prova2)), names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  eval(rlang::parse_expr(prova2)), names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  eval(prova2), names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  eval(prova2), names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  parse(prova2), names_to = "measure",
values_to = "value")
prava2<- paste(".data$", prova, sep ="")
dat_long <- tidyr::pivot_longer(dat_all, cols =  parse(prova2), names_to = "measure",
values_to = "value")
dat_long <- tidyr::pivot_longer(dat_all, cols =  !!prova2, names_to = "measure",
values_to = "value")
prava2<- paste(".data$", prova, sep ="")
prava2
prava2
library(rvent)
import_session()
devtools::load_all(".")
import_session2()
import_session2()
tsd <- vent[vent$info %in% comments_tsd, c("timecpu_s","info")]
vent <- dat
tsd <- vent[vent$info %in% comments_tsd, c("timecpu_s","info")]
vent
vent <- dat
devtools::load_all(".")
import_session2()
devtools::load_all(".")
import_session2()
devtools::load_all(".")
import_session2()
import_session2()
devtools::load_all(".")
import_session2()
na_pos <- dplyr::arrange(as.data.frame(which(is.na(tsd_s), arr.ind = TRUE)), row)
if(inter == FALSE){
if (missing(tofill)) stop("tofill missing!")
tsd_s[is.na(tsd_s)] <- tofill
}else{
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
}
if(inter == FALSE){
if (missing(tofill)) stop("tofill missing!")
tsd_s[is.na(tsd_s)] <- tofill
}else{
cat("hello")
# if (nrow(na_pos) > 0) {
#   for (x in as.numeric(unique(na_pos$row))) {
#     mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
#     tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
#     tofill <- unlist(strsplit(tofill, " "))
#     prova <- is.na(tsd_s[x,])
#     tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
# }
}
inter == FALSE
inter
nrow(na_pos) > 0
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
tsd_s[is.na(tsd_s)]
is.na(tsd_s)
tsd_s[is.na(tsd_s)]
tsd_s[is.na(tsd_s)]
class(tsd_s)
if(inter == FALSE){
if (missing(tofill)) stop("tofill missing!")
tsd_s[is.na(tsd_s)] <- tofill
}else{
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
}
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
if(inter == FALSE){
if (missing(tofill)) stop("tofill missing!")
tsd_s[is.na(tsd_s)] <- tofill
} else {
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
}
}
nrow(na_pos) > 0
if(inter == TRUE){
if (nrow(na_pos) > 0) {
for (x in as.numeric(unique(na_pos$row))) {
mesg <-  paste(list("subj =","; drug =", "; dose =", "; unit ="), unlist(tsd_s[x, 2:ncol(tsd_s)]), collapse = " ")
tofill <- svDialogs::dlg_input(paste0("Enter any missing values (NA) in:  ", mesg))$res
tofill <- unlist(strsplit(tofill, " "))
prova <- is.na(tsd_s[x,])
tsd_s[x, as.vector(is.na(tsd_s[x,]))] <- tofill}
} else {
tofill <- NULL
}
}
devtools::load_all(".")
import_session2()
devtools::load_all(".")
import_session2()
devtools::load_all(".")
import_session2()
import_session2()
usethis::use_test("vent")
load("~/Documents/R_projects/rvent/R/sysdata.rda")
class(dat_vent)
attributes(dat_vent)
names(attributes(dat_vent))
new_vent(dat_vent)
testthat("new_vent_ok",{
expect_success(new_vent(dat_vent))
})
expect_success(new_vent(dat_vent))
new_vent(dat_vent)
prova <- new_vent(dat_vent)
class(prova)
prova <- new_vent(dat_vent)
devtools::load_all(".")
prova <- new_vent(dat_vent)
class(prova)
expect_s3_class("vent",new_vent(dat_vent))
source('~/Documents/R_projects/rvent/tests/testthat/test-vent.R', echo=TRUE)
expect_s3_class(new_vent(dat_vent), "vent")
new_vent(as.list(dat_vent))
validate_vent(dat_vent2)
dat_vent2 <- new_vent(dat_vent)
validate_vent(dat_vent2)
as.data.frame(sapply(dat_vent, typeof))
devtools::load_all(".")
validate_vent(dat_vent)
obtained <- as.data.frame(sapply(dat, typeof))
expected_types <- c("double", "character", "character", "character", "character", "double", "integer", "double",
"double",  "double", "integer",  "double", "double")
expected_names <- c("cpu_date", "subj", "drug", "dose", "unit", "int_min", "measure",
"mean", "median", "sd", "n", "baseline", "bin")
!identical(expected_names,row.names(obtained))
identical(expected_names,row.names(obtained))
identical(expected_types, obtained[[1]])
obtained[[1]]
expected_types, as.list(obtained[[1]])
expected_types, as.list(obtained[[1]]
expected_types, as.list(obtained[[1]])
identical(expected_types, as.list(obtained[[1]])
)
expected_types
(!identical(expected_types, as.character(obtained[[1]]))
identical(expected_types, as.character(obtained[[1]]))
validate_vent(dat_vent)
devtools::load_all(".")
devtools::load_all(".")
validate_vent(dat_vent)
install.packages("styler")
styler:::set_style_transformers()
styler:::style_active_pkg()
# install.packages("devtools")
devtools::install_github("c1au6i0/rvent")
library(rvent)
library(rvent)
sess1 <- import_session()
summarize_vent(sess1)
sterr()
stderr()
library(rvent)
sess1 <- import_session()
library(rvent)
sess1 <- import_session()
library(rvent)
library(rvent)
sess1 <- import_session()
library(rvent)
sess1 <- import_session()
summarize_vent(sess1)
session_plots(sess1, bin = 3)
library(rvent)
devtools::install_github("c1au6i0/rvent")
